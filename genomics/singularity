BootStrap: debootstrap
OSVersion: bionic
MirrorURL: http://us.archive.ubuntu.com/ubuntu/


%runscript
    echo "This is what happens when you run the container..."


%post
    echo "Hello from inside the container"
    sed -i 's/$/ universe/' /etc/apt/sources.list
    echo "deb http://nl.archive.ubuntu.com/ubuntu bionic-updates main restricted" >> /etc/apt/sources.list
    apt-get update
    apt-get -y install vim
    apt-get -y update
    apt-get -y upgrade
    apt-get -y dist-upgrade
    apt-get -y install vim
    apt-get install -y curl
    apt-get install cmake -y
    #pip install psutil
    apt-get install -y software-properties-common
    #apt-get install add-apt-repository
    apt-get install flex bison -y
    apt-get install libboost-all-dev -y
    apt-get update && apt-get install -y gtk-doc-tools
    apt-get update && apt-get install -y libglib2.0-dev
    apt-get update && apt-get install -y libtool-bin
    apt-get update && apt-get install -y autoconf
    apt-get update && apt-get install -y autoconf-archive
    apt-get update && apt-get install -y libgirepository1.0-dev
    apt-get update && apt install -y git
    apt-get update && apt-get install -y linux-tools-generic

    apt-add-repository multiverse
    #apt-add-repository non-free
    apt update

    apt install -y build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev
    wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz
    tar -xf Python-3.8.0.tgz
    cd Python-3.8.0
    ./configure --enable-optimizations
    make -j 8
    make altinstall
    python3.8 --version
    alias python='/usr/bin/python3.8'
    apt-get update && python3.8 -m pip install numpy
    apt-get update && python3.8 -m pip install pyarrow==6.0.0
    apt-get update && python3.8 -m pip install pandas
    apt-get update && python3.8 -m pip install psutil
    apt-get update && python3.8 -m pip install pysam

    apt-get update
    apt-get -y install python3-pip

    apt-get update && apt-get install -y --no-install-recommends apt-utils

    apt update
    apt autoremove
    apt autoclean
    DEBIAN_FRONTEND=noninteractive apt-get install -y keyboard-configuration

    apt update
    apt install -y -V ca-certificates lsb-release wget
    wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
    apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
    apt update
    apt install -y -V libarrow-dev # For C++
    apt install -y -V libarrow-glib-dev # For GLib (C)
    apt install -y -V libarrow-dataset-dev # For Apache Arrow Dataset C++
    apt install -y -V libarrow-flight-dev # For Apache Arrow Flight C++
    # Notes for Plasma related packages:
    #   * You need to enable "non-free" component on Debian GNU/Linux
    #   * You need to enable "multiverse" component on Ubuntu
    #   * You can use Plasma related packages only on amd64
    apt install -y -V libplasma-dev # For Plasma C++
    apt install -y -V libplasma-glib-dev # For Plasma GLib (C)
    apt install -y -V libgandiva-dev # For Gandiva C++
    apt install -y -V libgandiva-glib-dev # For Gandiva GLib (C)
    apt install -y -V libparquet-dev # For Apache Parquet C++
    apt install -y -V libparquet-glib-dev # For Apache Parquet GLib (C)
    
    wget https://github.com/tahashmi/bwa/releases/download/0.02/bwa-sam.tar.gz
    tar -zxvf bwa-sam.tar.gz
    cd bwa-sam
    make clean
    make 
    cp bwa /usr/local/bin/
    
%environment
    export PATH=$PATH:/usr/local/bin
